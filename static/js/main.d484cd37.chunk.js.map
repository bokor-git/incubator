{"version":3,"sources":["Todolist/TodoItem.tsx","Todolist/Input.tsx","Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoItem","id","title","completed","del","check","className","style","display","marginRight","type","checked","onChange","onClick","Input","value","setValue","addTodo","items","setItems","setTodos","addItems","defaultTodo","userId","event","target","step","axios","require","default","TodoList","useState","todos","length","get","then","response","data","filter","td","map","todo","a","responce","newTodos","Date","getTime","newArr","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d484cd37.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./todolist.css\"\r\n\r\ntype Todo= {\r\n    userId: number\r\n    id: number\r\n    title: string\r\n    completed: boolean\r\n    del: Function\r\n    check:Function\r\n}\r\n\r\nexport const TodoItem = ({id, title, completed, del, check}:Todo) => {\r\n    return <div className={`todo-item ${completed?\"done\":\"not-done\"}`}>{completed ? \"✔\" : \"✘\"}  {title}\r\n    <input  style={completed?{display:\"none\", marginRight:\"1rem\"}:{display:\"initial\",marginRight:\"1rem\"}} type=\"checkbox\" checked={completed} onChange={()=>check(id)}/>\r\n    <button style={!completed?{display:\"none\"}:{display:\"initial\"}}  onClick={()=>del(id)}>Delete</button></div>\r\n};\r\n","import React, {useContext} from \"react\";\r\nimport Context from \"./Context\";\r\nimport \"./todolist.css\"\r\ntype Todo= {\r\n    userId: number\r\n    id: number\r\n    title: string\r\n    completed: boolean\r\n}\r\ntype Input = {\r\n    value: string\r\n    setValue: Function\r\n    addTodo: Function\r\n    items: number\r\n    setItems: Function\r\n    setTodos: Function\r\n    addItems: Function\r\n}\r\n\r\nconst Input = ({value, setValue, addTodo, items, setItems, setTodos, addItems}: Input) => {\r\nconst defaultTodo:Todo={\r\n    userId: 0,\r\n    id: 0,\r\n    title: \"Todo was cleaned! Please add your todo or generate it!\",\r\n    completed: true\r\n}\r\n    return <div className=\"input\"><input type=\"text\" value={value} onChange={event => setValue(event.target.value)}/>\r\n        <button onClick={() => addTodo(value)}>Add my todo</button>\r\n        <div><input type=\"number\" step={1} value={items} onChange={event => setItems(event.target.value)}/>\r\n            <button onClick={() => addItems(items)}>Generate new todo</button>\r\n           <div> <button onClick={() => setTodos([defaultTodo])}>Clear todo</button></div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}\r\nexport default Input","import React, {useState} from \"react\";\r\nimport {TodoItem} from \"./TodoItem\";\r\nimport Input from \"./Input\";\r\nimport \"./todolist.css\"\r\nconst axios = require('axios').default;\r\n\r\nconst TodoList = () => {\r\n    type Todo= {\r\n        userId: number\r\n        id: number\r\n        title: string\r\n        completed: boolean\r\n    }\r\n    const [todos, setTodos] = useState<any>([])\r\n    const [value, setValue] = useState<any>(\"\")\r\n    const [items, setItems] = useState<any>(5)\r\n    if (todos.length===0){axios.get(`https://jsonplaceholder.typicode.com/todos?_limit=${items}`).then((response:any)=> setTodos(response.data))}\r\nconst addTodo=(value:string):void=>{\r\n        const newTodos:Todo = {userId: 1, id: new Date().getTime(), title: value, completed: false}\r\n        const newArr:any = [...todos, newTodos];\r\n   setTodos(newArr)\r\n};\r\n\r\nconst del = (id:never):void=>{\r\n   setTodos(todos.filter((td:Todo) => td.id!== id))\r\n}\r\nconst check = (id:number)=>{\r\n       setTodos(todos.map((todo:Todo)=>{if (todo.id===id){todo.completed=!todo.completed}\r\n        return todo}))\r\n\r\n};\r\n    const addItems = async (items:number)=>{\r\n       let responce = await axios.get(`https://jsonplaceholder.typicode.com/todos?_limit=${items}`)\r\n        await setTodos(responce.data)\r\n    }\r\n   return <div className=\"todolist\">\r\n        <Input value={value}\r\n        setValue={setValue}\r\n        addTodo={addTodo}\r\n        items={items}\r\n        setItems={setItems}\r\n        setTodos={setTodos}\r\n        addItems={addItems}/>\r\n        {todos.map((todo:Todo) => <TodoItem {...todo} del={del} check={check}/>)}\r\n    </div>\r\n}\r\nexport default TodoList\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./Todolist/Todolist\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <TodoList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}